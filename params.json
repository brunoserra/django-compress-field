{"name":"Django-compress-field","tagline":"Custom Field for Django that auto compact file uploaded","body":"Django Compress Storage\r\n=======================\r\n\r\n[![Build Status](https://travis-ci.org/valdergallo/django-compress-field.png?branch=master)](https://travis-ci.org/valdergallo/django-compress-field)\r\n[![Latest Version](http://img.shields.io/pypi/v/django-compress-field.svg)](https://pypi.python.org/pypi/django-compress-field)\r\n[![BSD License](http://img.shields.io/badge/license-BSD-yellow.svg)](http://opensource.org/licenses/BSD-3-Clause)\r\n[![Pypi Download](https://pypip.in/d/django-compress-field/badge.png)](https://www.djangopackages.com/packages/p/django-compress-field)\r\n\r\nCustom ZipFileField for Django that auto compact file uploaded\r\n\r\n```\r\n    PROJECT RENAMED django-compress-storage to django-compress-field\r\n```\r\n\r\nInstall\r\n-------\r\n\r\n```bash\r\n    pip install django-compress-field\r\n```\r\nor by source code\r\n```bash\r\n    git clone https://github.com/valdergallo/django-compress-field/\r\n    python setup.py install\r\n```\r\n\r\n\r\n\r\nFeatures\r\n--------\r\n\r\n- Compress FileUpload storage file with Zip\r\n- Delete old file that was compressed on zip\r\n- Support for South Migrations\r\n- Support Django 1.2+\r\n- Celery 2.5+ support - async compress file with Celery\r\n- Windows Support\r\n- Linux support\r\n- OSx support\r\n- Support for Python3\r\n- Support for Python2.6+\r\n\r\n\r\nMotivation\r\n----------\r\n\r\nOn my job we need save all upload files for 5 year. Losing a lot space on server with this files, because this I created this application.\r\n\r\n\r\nDjango Settings Configurations\r\n------------------------------\r\n\r\n```python\r\n\r\nFILE_COMPRESS_DELETE_OLD_FILE = True # to delete old files after compressed\r\nFILE_COMPRESS_DELETE_OLD_FILE = False # to not delete old files after compressed\r\n\r\n# Feature only for version v9.0+\r\nFILE_COMPRESS_QUEUE = 'Celery' # by default queue is Celery, but you can change this with this var on settings\r\n\r\n\r\nINSTALLED_APPS = (\r\n    ...\r\n    ...\r\n    'compress_field',\r\n)\r\n```\r\n\r\n\r\nUsage\r\n-----\r\n\r\n```python\r\n\r\n# example model.py\r\n\r\nfrom django.db import models\r\nfrom compress_field import ZipFileField\r\n\r\nclass MyContent(models.Model):\r\n    name = models.CharField(max_length=150)\r\n    create_date = models.DateTimeField(auto_now=True)\r\n    upload_file = ZipFileField(upload_to='mycontent/')\r\n\r\n    def __unicode__(self):\r\n        return self.name\r\n\r\n```\r\n\r\n\r\nShell\r\n-----\r\n\r\n```python\r\n\r\n>>> from example.core import MyContent\r\n>>> m = MyContent.objects.get(id=2)\r\n>>> m.upload_file\r\n<ZipCompressFieldFile: mycontent/test.txt>\r\n>>> m.upload_file.compress()\r\n>>> m.upload_file\r\n<ZipCompressFieldFile: mycontent/test.zip>\r\n```\r\n\r\n\r\nUsing with Celery\r\n-----------------\r\n\r\nIf Celery are installed on Site Packages. You just need create one post_save on\r\nyour model to use async compress.\r\n\r\n\r\n```python\r\n# listeners.py file\r\n\r\nfrom django.db.models.signals import post_save\r\n\r\ndef auto_compress_file_on_post_save(sender, instance, **kargs):\r\n    instance.upload_file.compress()\r\n\r\npost_save.connect(auto_compress_file_on_post_save, sender=MyContent)\r\n\r\n```\r\n\r\nIf you donÂ´t wanna use Celery async compress:\r\n\r\n\r\n```python\r\n\r\ndef auto_compress_file_on_post_save(sender, instance, **kargs):\r\n    instance.upload_file.compress(async=False)\r\n\r\npost_save.connect(auto_compress_file_on_post_save, sender=MyContent)\r\n\r\n```\r\n\r\n\r\nDeveloper\r\n---------\r\n\r\n```bash\r\n# download code\r\ngit clone https://github.com/valdergallo/django-compress-field\r\n\r\n# install developer packages\r\nsetup.py develop\r\n\r\n# test project\r\nsetup.py test\r\n\r\n#clean extra content\r\nsetup.py clean\r\n\r\n```\r\n\r\n\r\n","google":"UA-39903489-4","note":"Don't delete this file! It's used internally to help with page regeneration."}